<?xml version="1.0" encoding="UTF-8"?>
<!-- JBoss, Home of Professional Open Source Copyright 2014, Red Hat, Inc. 
	and/or its affiliates, and individual contributors by the @authors tag. See 
	the copyright.txt in the distribution for a full listing of individual contributors. 
	Licensed under the Apache License, Version 2.0 (the "License"); you may not 
	use this file except in compliance with the License. You may obtain a copy 
	of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<!-- Configures the Camel Context -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
	<!-- ########################################################### -->
	<!-- Definition of remote cache Manager -->
	<!-- ########################################################### -->
	<bean class="techlab.factory.RemoteCacheManagerFactory" id="remoteCacheManagerFactory">
		<constructor-arg value="localhost" />
		<constructor-arg value="11222" />
	</bean>
	<bean factory-bean="remoteCacheManagerFactory" factory-method="newRemoteCacheManager"
		id="cacheManager" />
	<bean class="techlab.dg.QueryProcessor" id="queryProcessor">
		<property name="cacheContainer" ref="cacheManager" />
	</bean>

	<bean id="generateQuery" class="techlab.dg.GenerateQuery" />

	<camelContext id="techlab-fuse-jdg-simple-hotrod" xmlns="http://camel.apache.org/schema/spring">
		<!-- Data Grid endpoint -->
		<endpoint id="datagrid" uri="infinispan://?cacheContainer=#cacheManager" />
		<restConfiguration apiContextPath="/api-doc"
			bindingMode="json" component="netty4-http" enableCORS="true" port="7123">
			<dataFormatProperty key="prettyPrint" value="true" />
		</restConfiguration>
		<rest id="svc" path="">
			<get id="clearCacheOp" uri="clearCache/{cacheName}">
				<description>Clears a certain cache</description>
				<to uri="direct:clearCacheOp" />
			</get>
			<get id="getOp" uri="{cacheName}/{uid}">
				<description>Get an entry with an ID from a cache</description>
				<to uri="direct:getOp" />
			</get>
			<put id="putOp" type="techlab.model.Event" uri="{cacheName}/{uid}">
				<description>Inserts an entry with the given ID and content in a cache</description>
				<to uri="direct:putOp" />
			</put>
			<get id="queryOp" uri="query/{cacheName}/{type}">
				<description>Allows to query based on object fields using lucene search engine</description>
				<to uri="direct:queryOp" />
			</get>
			<get id="queryAltOp" uri="queryalt/{cacheName}/{type}">
				<description>Allows to query based on object fields using lucene search engine (uses alternative imp)</description>
				<to uri="direct:queryAltOp" />
			</get>

		</rest>
		<!-- rest service to get an entry with the key -->
		<route id="getOpRoute">
			<from id="getOpStarter" uri="direct:getOp" />
			<setHeader headerName="CamelInfinispanKey" id="getOpRouteSetKey">
				<simple>${headers.uid}</simple>
			</setHeader>
			<setHeader headerName="CamelInfinispanCacheName" id="getOpRouteSetCacheName">
				<simple>${headers.cacheName}</simple>
			</setHeader>
			<setHeader headerName="CamelInfinispanOperation" id="getOpRouteSetOperation">
				<constant>CamelInfinispanOperationGet</constant>
			</setHeader>
			<to id="getOpRouteToDataGrid" uri="ref:datagrid" />
			<setBody id="getOpRouteSetResponse">
				<simple>${header.CamelInfinispanOperationResult}</simple>
			</setBody>
		</route>
		<route id="clearCacheRoute">
			<from id="clearCacheStarter" uri="direct:clearCacheOp" />
			<setHeader headerName="CamelInfinispanCacheName"
				id="clearCacheSetCamelInfinispanCacheName">
				<simple>${headers.cacheName}</simple>
			</setHeader>
			<setHeader headerName="CamelInfinispanOperation"
				id="clearCacheSetCamelInfinispanOperation">
				<constant>CamelInfinispanOperationClear</constant>
			</setHeader>
			<to id="clearCacheRouteToDataGrid" uri="ref:datagrid" />
			<setBody id="clearCacheRouteSetResponse">
				<simple>${headers.cacheName} cleared!</simple>
			</setBody>
		</route>
		<!-- rest service to put entries into a cache -->
		<route id="putOpRoute">
			<from id="putOpStarter" uri="direct:putOp" />
			<setHeader headerName="CamelInfinispanKey" id="putOpRouteSetKey">
				<simple>${headers.uid}</simple>
			</setHeader>
			<setHeader headerName="CamelInfinispanCacheName" id="putOpRouteSetCacheName">
				<simple>${headers.cacheName}</simple>
			</setHeader>
			<setHeader headerName="CamelInfinispanOperation" id="putOpRouteSetOperation">
				<constant>CamelInfinispanOperationPut</constant>
			</setHeader>
			<setHeader headerName="CamelInfinispanValue" id="putOpRouteSetValue">
				<simple>${body}</simple>
			</setHeader>
			<to id="putOpRouteToDataGrid" uri="ref:datagrid" />
			<setBody id="putOpRouteSetResponse">
				<simple>Value inserted</simple>
			</setBody>
		</route>

		<!-- alternative query with built in cache manager -->

		<route id="queryAltOpRoute">
			<from id="queryAltOpStarter" uri="direct:queryAltOp" />
			<log id="_log1" message="${headers}" />
			<process id="queryAltOpRouteProcessor" ref="queryProcessor" />
		</route>

		<!-- rest service to query caches with any indexed field -->
		<route id="queryOpRoute">
			<from id="queryOpStarter" uri="direct:queryOp" />
			<log message="Query headers : ${headers}"></log>
			<setHeader headerName="CamelInfinispanCacheName" id="queryOpRouteSetCacheName">
				<simple>${headers.cacheName}</simple>
			</setHeader>
			<setHeader headerName="CamelInfinispanOperation" id="queryOpRouteSetOperation">
				<constant>CamelInfinispanOperationQuery</constant>
			</setHeader>
			<setHeader headerName="CamelInfinispanQueryBuilder" id="queryOpRouteSetBuilder">
				<method ref="generateQuery" method="getBuilder" />
			</setHeader>
			<to id="queryOpRouteToDataGrid" uri="ref:datagrid" />
			<setBody id="queryOpRouteSetResponse">
				<simple>${header.CamelInfinispanOperationResult}</simple>
			</setBody>
		</route>

	</camelContext>
</beans>
